import { TicketStatus } from "@models/ticket";

/**
 * DTO for creating a new Ticket record.
 *
 * Used when a user books a new ticket for a trip.
 * Fields like `id`, `createdAt`, and `updatedAt` are automatically generated by the system.
 */
export interface CreateTicketDTO {
	/** User ID who is booking the ticket */
	userId: string;

    status: TicketStatus;

	/** Seat ID assigned to this ticket (optional during booking) */
	seatId?: number | null;

	/** Base ticket price before any adjustments */
	basePrice: number;

	/** Final ticket price after all adjustments (discounts, taxes, etc.) */
	finalPrice: number;

	/** Payment ID (optional if payment not yet completed) */
	paymentId?: number | null;
}


/**
 * DTO for filtering or searching Tickets in GET requests.
 *
 * Used for queries like `/tickets?userId=1&tripId=5&minBasePrice=50&maxFinalPrice=100`.
 * All parameters are optional for flexible searching.
 */
export interface GetTicketQueryDTO {
	/** Filter by user ID */
	userId?: string;

	/** Filter by trip ID */
	tripId?: number;

	/** Filter by ticket status */
	status?: TicketStatus;

	/** Minimum base price filter */
	minBasePrice?: number;

	/** Maximum base price filter */
	maxBasePrice?: number;

	/** Minimum final price filter */
	minFinalPrice?: number;

	/** Maximum final price filter */
	maxFinalPrice?: number;

	/** Filter by payment status (true = has paymentId, false = null) */
	isPaid?: boolean;
}
