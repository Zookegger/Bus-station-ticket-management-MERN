import { TicketStatus } from "@models/ticket";
import { PaymentAdditionalData, PaymentInitResponse, PaymentMethod } from "@my_types/payments";

/**
 * DTO for creating a new Ticket record.
 *
 * Used when a user books a new ticket for a trip.
 * Fields like `id`, `createdAt`, and `updatedAt` are automatically generated by the system.
 */
export interface BookTicketDTO {
	/** User ID who is booking the ticket */
	userId: string;

	/** Seat ID assigned to this ticket (optional during booking) */
	seatIds?: number | number[] | null;

	couponIds?: string | null;

  	/** Selected payment gateway code */
	paymentMethodCode: PaymentMethod;
	
	/** Optional gateway-specific data (e.g., ipAddress, orderInfo, locale) */
	additionalData?: PaymentAdditionalData;
}

/**
 * Response returned by the booking flow to the client.
 */
export interface BookTicketResult {
  /** Persisted ticket IDs (status = PENDING until payment completes) */
  ticketIds: number[];

  /** Redirect URL to the selected payment gateway (if applicable) */
  paymentUrl?: string;

  /** Compact payment summary */
  payment?: PaymentInitResponse;
}

/**
 * DTO for filtering or searching Tickets in GET requests.
 *
 * Used for queries like `/tickets?userId=1&tripId=5&minBasePrice=50&maxFinalPrice=100`.
 * All parameters are optional for flexible searching.
 */
export interface GetTicketQueryDTO {
	/** Filter by user ID */
	userId?: string;

	/** Filter by trip ID */
	tripId?: number;

	/** Filter by ticket status */
	status?: TicketStatus;

	/** Minimum base price filter */
	minBasePrice?: number;

	/** Maximum base price filter */
	maxBasePrice?: number;

	/** Minimum final price filter */
	minFinalPrice?: number;

	/** Maximum final price filter */
	maxFinalPrice?: number;
}
